//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt { tapping-term-ms = <400>; };

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
        };

        enne {
            bindings = <&enne>;
            key-positions = <18 19>;
        };

        kF1 {
            bindings = <&kp F1>;
            key-positions = <27 35>;
            layers = <0>;
        };

        kF2 {
            bindings = <&kp F2>;
            key-positions = <35 28>;
            layers = <0>;
        };

        singlequote {
            bindings = <&simplecomilla>;
            key-positions = <16 13>;
        };

        doublequote {
            bindings = <&doblecomilla>;
            key-positions = <13 6>;
        };

        combo_enter {
            bindings = <&kp ENTER>;
            key-positions = <35 19>;
        };

        capa_numeros {
            bindings = <&mo 4>;
            key-positions = <34 13>;
        };

        altEnter {
            bindings = <&kp LA(ENTER)>;
            key-positions = <33 32>;
        };

        kF5 {
            bindings = <&kp F5>;
            key-positions = <35 17>;
        };

        asterisco {
            bindings = <&kp ASTERISK>;
            key-positions = <13 17>;
        };

        ampersand {
            bindings = <&kp AMPERSAND>;
            key-positions = <13 7>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <13 27>;
        };
    };

    macros {
        enne: enne {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(N) &kp N>;
            label = "ENNE";
        };

        doblecomilla: doblecomilla {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOUBLE_QUOTES &kp SPACE>;
            label = "DOBLECOMILLA";
        };

        simplecomilla: simplecomilla {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SINGLE_QUOTE &kp SPACE>;
            label = "SIMPLECOMILLA";
        };
    };

    behaviors {
        borra_mac: borra_mac {
            compatible = "zmk,behavior-tap-dance";
            label = "BORRA_MAC";
            #binding-cells = <0>;
            bindings = <&kp DEL>, <&kp LG(BACKSPACE)>;

            tapping-term-ms = <400>;
        };

        u_doublequote: u_doublequote {
            compatible = "zmk,behavior-tap-dance";
            label = "U_DOUBLEQUOTE";
            #binding-cells = <0>;
            bindings = <&kp U>, <&doblecomilla>;
        };

        j_singlequote: j_singlequote {
            compatible = "zmk,behavior-tap-dance";
            label = "J_SINGLEQUOTE";
            #binding-cells = <0>;
            bindings = <&kp J>, <&simplecomilla>;
        };

        r_d1: r_d1 {
            compatible = "zmk,behavior-tap-dance";
            label = "R_D1";
            #binding-cells = <0>;
            bindings = <&kp R>, <&kp LG(NUMBER_1)>;
        };

        t_d2: t_d2 {
            compatible = "zmk,behavior-tap-dance";
            label = "T_D2";
            #binding-cells = <0>;
            bindings = <&kp T>, <&kp LG(NUMBER_2)>;
        };

        f_d3: f_d3 {
            compatible = "zmk,behavior-tap-dance";
            label = "F_D3";
            #binding-cells = <0>;
            bindings = <&kp F>, <&kp LG(NUMBER_3)>;
        };

        g_d4: g_d4 {
            compatible = "zmk,behavior-tap-dance";
            label = "G_D4";
            #binding-cells = <0>;
            bindings = <&kp G>, <&kp LG(NUMBER_4)>;
        };

        v_d5: v_d5 {
            compatible = "zmk,behavior-tap-dance";
            label = "V_D5";
            #binding-cells = <0>;
            bindings = <&kp V>, <&kp LG(N5)>;
        };

        w_print: w_print {
            compatible = "zmk,behavior-tap-dance";
            label = "W_PRINT";
            #binding-cells = <0>;
            bindings = <&kp W>, <&kp PRINTSCREEN>;
        };

        b_control_enter: b_control_enter {
            compatible = "zmk,behavior-tap-dance";
            label = "B_CONTROL_ENTER";
            #binding-cells = <0>;
            bindings = <&kp B>, <&kp LC(ENTER)>;
        };

        layer_tap2: layer_tap2 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP2";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <400>;
            bindings = <&mo>, <&kp>;
        };

        mt2: mt2 {
            compatible = "zmk,behavior-hold-tap";
            label = "MT2";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
               &kp Q              &mt2 PRINTSCREEN W  &kp E       &kp R            &kp T                  &kp Y                   &mt2 DOUBLE_QUOTES U  &mt2 AMPS I    &kp O    &kp P
               &layer_tap2 1 A    &layer_tap2 2 S     &kp D       &layer_tap2 4 F  &kp G                  &kp H                   &mt2 SINGLE_QUOTE J   &mt2 ASTRK K   &kp L    &lt 4 SEMICOLON
&mt LCTRL TAB  &mt2 LEFT_SHIFT Z  &kp X               &kp C       &kp V            &kp B                  &kp N                   &kp M                 &kp COMMA      &kp DOT  &kp FSLH         &kp APOS
                                                      &borra_mac  &lt 5 ENTER      &mt LEFT_META SPACE    &mt2 RIGHT_SHIFT SPACE  &lt 5 SPACE           &kp RIGHT_ALT
            >;
        };

        linux {
            bindings = <
                   &kp LA(BACKSPACE)   &kp LA(LS(F))  &mt LS(LC(F)) RC(F)  &kp LC(N1)        &kp LC(NUMBER_2)    &kp N5          &kp N6           &kp N7       &kp LC(O)      &kp N9
                   &kp LA(LEFT_ARROW)  &kp LC(S)      &kp LC(D)            &kp LC(NUMBER_3)  &kp LC(NUMBER_4)    &kp N0          &kp N1           &kp N2       &kp LC(LA(L))  &kp N4
&kp LG(BACKSPACE)  &kp LG(UP_ARROW)    &kp LC(X)      &kp LC(C)            &kp LC(V)         &kp LC(B)           &kp PERIOD      &kp PLUS         &kp MINUS    &kp STAR       &kp FSLH  &kp CARET
                                                      &kp LC(Z)            &kp LC(LS(Z))     &kp LC(ENTER)       &kp LEFT_SHIFT  &kp RIGHT_SHIFT  &kp PERCENT
            >;
        };

        sym_func {
            bindings = <
           &kp ESC         &none  &kp C_VOLUME_UP    &kp LG(NUMBER_1)  &kp LG(NUMBER_2)    &kp F1        &kp F2        &kp F3        &kp F4   &kp F5
           &kp LEFT_SHIFT  &none  &kp C_VOLUME_DOWN  &kp LG(NUMBER_3)  &kp LG(NUMBER_4)    &kp F6        &kp F7        &kp F8        &kp F9   &kp F10
&kp GRAVE  &kp LESS_THAN   &none  &kp C_PLAY_PAUSE   &kp LG(N5)        &kp UNDERSCORE      &kp F11       &kp F12       &kp F13       &kp F14  &kp F15  &kp F16
                                  &trans             &trans            &kp LEFT_CONTROL    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2
            >;
        };

        device {
            bindings = <
       &none       &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp C_VOLUME_UP   &none    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
       &kp K_MUTE  &kp C_VOLUME_DOWN     &kp C_VOLUME_UP       &kp C_VOL_DN      &none    &none         &none         &none         &none         &none
&none  &none       &none                 &none                 &kp C_PLAY_PAUSE  &none    &none         &none         &none         &none         &none         &bt BT_CLR
                                         &none                 &none             &none    &none         &none         &none
            >;
        };

        num {
            bindings = <
           &kp GRAVE        &kp LESS_THAN         &kp GREATER_THAN       &kp UNDERSCORE  &kp BACKSLASH    &kp PERIOD     &kp N7        &kp N8        &kp N9        &kp PLUS
           &kp EXCLAMATION  &kp AT_SIGN           &kp HASH               &kp DOLLAR      &kp PERCENT      &kp BACKSPACE  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp MINUS
&kp TILDE  &kp RA(N0)       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PERIOD      &kp PIPE         &kp EQUAL      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp FSLH   &kp ENTER
                                                  &trans                 &kp COLON       &kp LEFT_ALT     &kp N0         &kp MINUS     &kp COMMA
            >;
        };

        cursor {
            bindings = <
                   &kp LA(BACKSPACE)   &kp RA(LEFT_ARROW)  &kp RA(RIGHT_ARROW)  &kp UNDERSCORE         &kp UNDERSCORE    &kp N5     &kp HOME       &kp END       &kp PAGE_UP  &none
                   &kp LA(LEFT_ARROW)  &kp LEFT_BRACKET    &kp LEFT_BRACE       &kp LEFT_PARENTHESIS   &kp MINUS         &kp LEFT   &kp DOWN       &kp UP_ARROW  &kp RIGHT    &kp PAGE_DOWN
&kp LG(BACKSPACE)  &kp LG(UP_ARROW)    &kp RIGHT_BRACKET   &kp RIGHT_BRACE      &kp RIGHT_PARENTHESIS  &kp PIPE          &kp EQUAL  &kp BACKSPACE  &kp DEL       &kp STAR     &kp FSLH       &kp CARET
                                                           &trans               &trans                 &trans            &kp TAB    &kp TAB        &kp PERCENT
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
